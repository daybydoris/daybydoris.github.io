I"<p><a href="http://www.kocw.net/home/search/kemView.do?kemId=1226304">이화여대 반효경 교수님 강의</a>를 듣고 정리한 내용
<br /><br /></p>

<p>컴퓨터 시스템의 구조와 관련해, 프로그램 수행에 Mode bit, Timer 등이 어떻게 작동하는지 알아본다.<br /><br /></p>

<h1 id="컴퓨터-시스템-구조">컴퓨터 시스템 구조</h1>

<p><img src="https://user-images.githubusercontent.com/60416981/124471777-40840380-ddd8-11eb-97cb-0985897ad85b.png" alt="image" /></p>

<ul>
  <li>CPU는 기계어를 연산, 그 연산을 수행하는 공간은 메모리.</li>
  <li>
    <p>Device controller : 각 I/O 장치를 전담하는 작은 CPU</p>
  </li>
  <li>
    <p>Local buffer: 각 I/O 장치들의 작업공간 (CPU-메모리 관계에서 메모리 역할)</p>
  </li>
  <li>운영체제의 기계어를 연산할 때
    <ul>
      <li>신뢰 가능함</li>
    </ul>
  </li>
  <li>사용자 프로그램의 기계어를 연산할 때
    <ul>
      <li>프로그램을 신뢰할 수 없음. (무한루프 등 악의적인 프로그램일 수 있음)</li>
      <li>CPU가 사용자 프로그램에게 넘어가면 운영체제는 CPU 제어권을 빼앗김</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="mode-bit">Mode bit</h2>

<p><img src="https://user-images.githubusercontent.com/60416981/124476413-bd65ac00-dddd-11eb-97c5-c82809e6e824.png" alt="image" /></p>

<blockquote>
  <p>사용자 프로그램의 잘못된 수행으로 다른 프로그램 및 운영체제에 피해가 가지 않도록 하기 위한 보호 장치</p>
</blockquote>

<p><br /></p>

<table>
  <thead>
    <tr>
      <th>bit</th>
      <th>모드</th>
      <th>수행하는 코드</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>모니터 모드 (커널 모드, 시스템 모드)</td>
      <td>OS 코드 수행</td>
    </tr>
    <tr>
      <td>1</td>
      <td>사용자 모드</td>
      <td>사용자 프로그램 수행</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<ul>
  <li>
    <p>보안을 해칠 수 있는 중요한 명령어는 <strong>모니터 모드</strong>에서만 수행 가능한 <strong>특권명령</strong>으로 규정</p>
  </li>
  <li>사용자 프로그램에서 CPU를 넘기기 전에 mode bit을 1로 세팅함</li>
  <li>Interrupt나 Exception 발생 시 하드웨어가 mode bit을 0으로 바꾸면서 CPU가 운영체제로 넘어감
    <ul>
      <li>Interrupt는 I/O 장치들이 발생시킴</li>
      <li>CPU는 다른 작업 수행 전에 이를 먼저 확인한 후 CPU를 운영체제에 넘김</li>
    </ul>
  </li>
  <li>CPU 안의 레지스터 : 연산의 Input/Output을 저장하기 위한 빠르고 작은 크기의 레지스터
    <ul>
      <li>Program Counter(PC): 다음 번에 실행할 기계어의 메모리 주소를 저장하고 있는 레지스터. PC가 어디를 가리키고 있는지를 보면 어디에 있는 기계어를 연산하고 있는지 알 수 있음.</li>
    </ul>
  </li>
  <li>CPU 제어권을 뺏어오는 방법
    <ul>
      <li>운영체제 혼자서는 불가능</li>
      <li>Timer라는 하드웨어의 도움을 받아야함.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="timer">Timer</h2>

<blockquote>
  <p>일정 시간이 흐른 뒤, 운영체제에게 CPU 제어권이 넘어가도록 Interrupt를 발생시키는 하드웨어</p>
</blockquote>

<ul>
  <li>매 클럭 틱마다 1씩 감소</li>
  <li>타이머 값이 0이 되면 타이머 인터럽트 발생</li>
  <li>CPU를 특정 프로그램이 독점하는 것을 막음</li>
</ul>
:ET